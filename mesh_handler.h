#ifndef MESH_HANDLER_H
#define MESH_HANDLER_H
#include <WiFi.h>
#include <Arduino.h>
#include <painlessMesh.h>
#include <ArduinoJson.h>

#include "config.h"
#include "protocol_handler.h"

// ƒê·ªëi t∆∞·ª£ng mesh
extern painlessMesh mesh;

// C·ªù b√°o mesh ƒë√£ init xong
extern bool meshReady;

void onMeshReceive(uint32_t from, String &msg);

// Callback nh·∫≠n d·ªØ li·ªáu t·ª´ mesh
inline void meshReceiveCb(uint32_t from, String &msg)
{

    Serial.printf("[mesh RX] from %u: %s\n", from, msg.c_str());

    // B·ªè qua nh·ªØng frame kh√¥ng ph·∫£i JSON
    if (!msg.startsWith("{"))
        return;

    // X·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
    StaticJsonDocument<256> doc;
    DeserializationError error = deserializeJson(doc, msg);

    if (error)
    {
        Serial.print(" Json parse failed: ");
        Serial.println(error.c_str());
        return;
    }
    // G·ªçi handler JSON chuy√™n bi·ªát
    onMeshReceive(from, msg);
}

// Kh·ªüi t·∫°o mesh network
inline void initMesh()
{
    Serial.println("Kh·ªüi t·∫°o Mesh...");
    WiFi.mode(WIFI_AP_STA);
    delay(100); // ƒê·ª£i WiFi mode ·ªïn ƒë·ªãnh

    // Ch·ªâ log ERROR, STARTUP, CONNECTION ·ªü v√≠ d·ª• n√†y
    mesh.setDebugMsgTypes(ERROR | STARTUP); // N·∫øu c·∫ßn hi·ªán k·∫øt n·ªëi th√¨ th√™m CONNECTION

    // init(meshID, password, port, WiFiMode, channel)
    mesh.init(MESH_SSID, MESH_PASSWORD, MESH_PORT, WIFI_AP_STA, MESH_CHANNEL);

    // ƒêƒÉng k√Ω callback
    mesh.onReceive(&meshReceiveCb);
    Serial.println("‚úÖ [mesh_handler] Kh·ªüi t·∫°o painlessMesh th√†nh c√¥ng");

    // Log khi c√≥ node m·ªõi k·∫øt n·ªëi v√†o mesh
    mesh.onNewConnection([](uint32_t nodeId)
                         { mac_nhan = nodeId; // L∆∞u MAC nh·∫≠n
                            Serial.printf("‚ûï Node %u v·ª´a tham gia mesh\n", nodeId); });

    // Log khi c√≥ thay ƒë·ªïi k·∫øt n·ªëi trong mesh (node v√†o/ra)
    mesh.onChangedConnections([]()
                              {
    Serial.printf("üîÑ Danh s√°ch node hi·ªán t·∫°i: ");
    for (auto n : mesh.getNodeList()) Serial.printf("%u ", n);
    Serial.println(); });

    meshReady = true;
    Serial.println("‚úÖ M·∫°ng mesh ƒë√£ s·∫µn s√†ng");
}

inline void sendToNode(uint32_t nodeId, const String &message)
{
    mesh.sendSingle(nodeId, message);
    Serial.printf("üì§ Sent to node %u: %s\n", nodeId, message.c_str());
}

inline void meshLoop()
{
    mesh.update();
}
#endif // MESH_HANDLER_H
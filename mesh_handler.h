#ifndef MESH_HANDLER_H
#define MESH_HANDLER_H

#include <painlessMesh.h>
#include <ArduinoJson.h>
#include "config.h"
#include "protocol_handler.h" // prototype c·ªßa sendResponse(...)

// Th√¥ng s·ªë m·∫°ng mesh
#define MESH_SSID      "Hub66sMesh"
#define MESH_PASSWORD  "mesh_pass_456"
#define MESH_PORT      5555
#define MESH_CHANNEL   2

extern painlessMesh mesh;

/**
 * Callback khi nh·∫≠n message t·ª´ mesh
 * Ch·ªâ x·ª≠ l√Ω message JSON h·ª£p l·ªá v√† x√°c th·ª±c ƒë√∫ng.
 */
inline void meshReceivedCallback(uint32_t from, String &msg) {
    msg.trim();
    if (msg.isEmpty()) return;

    // Ch·ªâ x·ª≠ l√Ω message JSON
    if (!msg.startsWith("{")) {
        Serial.printf("[mesh] Non-JSON message: %s\n", msg.c_str());
        return;
    }

    // Parse JSON
    StaticJsonDocument<384> doc;  //t·ª´ 512 h·∫° xu·ªëng 384
    auto err = deserializeJson(doc, msg);
    if (err) {
        Serial.printf("[mesh] JSON parse error: %s\n", err.c_str());
        return;
    }

    // 5) L·∫•y c√°c tr∆∞·ªùng
    int id_src = doc["id_src"].as<int>();
    int id_des = doc["id_des"].as<int>();
    uint8_t opcode = doc["opcode"].as<uint8_t>();
    String mac_src_str = doc["mac_src"].as<String>();
    String mac_des_str = doc["mac_des"].as<String>();

    // ‚ö†Ô∏è Chuy·ªÉn MAC t·ª´ chu·ªói HEX ‚Üí uint32_t
    uint32_t mac_src = strtoul(mac_src_str.c_str(), nullptr, 16);
    uint32_t mac_des = strtoul(mac_des_str.c_str(), nullptr, 16);

    // 6) ƒê∆∞a ph·∫ßn data v√†o DynamicJsonDocument
    DynamicJsonDocument dataDoc(256);
    dataDoc.set(doc["data"]);

    // 7) T√≠nh node ƒë√≠ch (d√πng 'from' ·ªü ƒë√¢y)
    uint32_t destNode = from;

    // 8) So s√°nh chu·ªói x√°c th·ª±c auth
    String receivedAuth = doc["auth"].as<String>();
    String dataStr;
    serializeJson(dataDoc, dataStr);

    unsigned long timestamp = doc["time"] | 0; // th·ªùi gian g·ª≠i
    String calculatedAuth = md5Hash(id_src, id_des, mac_src, mac_des, opcode, dataStr, timestamp);

    // Ki·ªÉm tra x√°c th·ª±c

    if (!receivedAuth.equalsIgnoreCase(calculatedAuth)) {
        Serial.println("‚ùå AUTH MISMATCH! Packet rejected.");
        return;
    }
    Serial.println("‚úÖ AUTH OK ‚Äì processing...");

    // X·ª≠ l√Ω logic s√¢u h∆°n: g·ªçi h√†m x·ª≠ l√Ω g√≥i tin mesh chuy√™n bi·ªát n·∫øu c√≥
    if (onMeshReceive) onMeshReceive(from, msg);

    // N·∫øu mu·ªën g·ª≠i ph·∫£n h·ªìi th√¨ g·ª≠i v·ªÅ node g·ª≠i
    // C√≥ th·ªÉ tu·ª≥ ch·ªânh ƒëi·ªÅu ki·ªán n√†y (ho·∫∑c b·ªè n·∫øu kh√¥ng c·∫ßn)
    // N·∫øu c·∫ßn g·ª≠i ph·∫£n h·ªìi s·ª≠ d·ª•ng sendResponse nh∆∞ b√™n d∆∞·ªõi:
    // sendResponse(id_src, id_des, mac_src, mac_des, opcode, doc["data"], from);
}

/**
 * Kh·ªüi t·∫°o m·∫°ng mesh
 */
inline void initMesh() {
    Serial.println("Kh·ªüi t·∫°o Mesh...");
    WiFi.mode(WIFI_AP_STA);
    delay(100);
    WiFi.setTxPower(WIFI_POWER_2dBm);

    mesh.setDebugMsgTypes(ERROR | STARTUP);
    mesh.init(MESH_SSID, MESH_PASSWORD, MESH_PORT, WIFI_AP_STA, MESH_CHANNEL);
    WiFi.softAP(MESH_SSID, MESH_PASSWORD, MESH_CHANNEL, true);

    mesh.onReceive(&meshReceivedCallback);
    Serial.println("‚úÖ mesh_handler: painlessMesh initialized");
}

/**
 * H√†m g·ªçi trong loop() ƒë·ªÉ c·∫≠p nh·∫≠t mesh
 */
inline void meshLoop() {
    mesh.update();
}

/**
 * G·ª≠i broadcast t·ªõi to√†n m·∫°ng
 */
inline void broadcastMeshMessage(const String &json) {
    Serial.println("üì§ G·ª≠i broadcast t·ªõi mesh: " + json);

    if (!mesh.sendBroadcast(json)) {
        Serial.println("‚ùå G·ª≠i broadcast th·∫•t b·∫°i");
        led.setState(CONNECTION_ERROR);
    } else {
        Serial.println("‚úÖ G·ª≠i broadcast th√†nh c√¥ng");
        led.setState(FLASH_TWICE);
    }
}

#endif // MESH_HANDLER_H
